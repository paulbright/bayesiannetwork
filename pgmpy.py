# -*- coding: utf-8 -*-
"""pgmpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pNRDtxRK-0WuPK1SL1d1PvJ24detMKse
"""

#https://www.youtube.com/watch?v=DEHqIxX1Kq4
#https://github.com/AileenNielsen/PyGotham_2016_Probabilistic_Graphical_Models

from pgmpy.factors.discrete import TabularCPD
from pgmpy.models import BayesianNetwork

"""# Setting up your model

### First, set the structure
"""

olympic_model = BayesianNetwork([('Genetics', 'OlympicTrials'),
                             ('Practice', 'OlympicTrials'),
                             ('OlympicTrials', 'Offer')])

"""### Then set up the relationships (the CPDs)"""

genetics_cpd = TabularCPD(
                variable = 'Genetics',
                variable_card = 2,
                values = [[.2],[.8]])

practice_cpd = TabularCPD(
                variable = 'Practice',
                variable_card = 2,
                values = [[.7],[.3]])

offer_cpd = TabularCPD(
                    variable = 'Offer',
                    variable_card = 2,
                    values = [[.95, .8, .5],
                             [.05, .2, .5]],
                    evidence = ['OlympicTrials'],
                    evidence_card = [3])

olympic_trials_cpd = TabularCPD(
                        variable = 'OlympicTrials',
                        variable_card = 3,
                        values = [[.5, .8, .8, .9],
                                 [.3, .15, .1, .08],
                                 [.2, .05, .1, .02]],
                        evidence = ['Genetics', 'Practice'],
                        evidence_card = [2,2])

"""### Add the relationships to your models"""

olympic_model.add_cpds (genetics_cpd, practice_cpd, offer_cpd, olympic_trials_cpd)

"""### Examine the structure of your graph"""

olympic_model.get_cpds()

"""### Find active trail nodes"""

olympic_model.active_trail_nodes('Genetics')

olympic_model.active_trail_nodes('OlympicTrials')

"""### Find local independencies"""

olympic_model.local_independencies('Genetics')

olympic_model.local_independencies('OlympicTrials')

"""### Get all independencies"""

olympic_model.get_independencies()

"""# Making inferences

### We can get probability distributions that are not explicitly spelled out in our graphs
"""

from pgmpy.inference import VariableElimination

olympic_infer = VariableElimination(olympic_model)

prob_offer = olympic_infer.query(variables = ['Offer'])
print(prob_offer)

"""### We can also get conditional probability distributions that take into account what we already know"""

prob_offer_good_genes = olympic_infer.query(
                                        variables = ['Offer', 'Genetics'])
print(prob_offer_good_genes)

prob_offer_good_genes = olympic_infer.query(
                                        variables = ['Offer', 'OlympicTrials'])
print(prob_offer_good_genes)

prob_offer_bad_genes = olympic_infer.query(
                                        variables = ['Offer'],
                                        evidence = {'Genetics':1})
print(prob_offer_bad_genes)

prob_offer_good_genes = olympic_infer.query(
                                        variables = ['Offer'],
                                        evidence = {'Genetics':0})
print(prob_offer_good_genes)

prob_offer_good_genes_did_practice = olympic_infer.query(
                                        variables = ['Offer'],
                                        evidence = {'Genetics':0, 'Practice':0})
print(prob_offer_good_genes_did_practice)

"""### You can also go upstream logically. For example, evidence about performance at the Olympic Trials affects the probabilities of Genetics."""

prob_good_genes_if_amazing_olympic_trials = olympic_infer.query(
                                        variables = ['Genetics'],
                                        evidence = {'OlympicTrials':2})
print(prob_good_genes_if_amazing_olympic_trials)

"""### Some variables are only informative about other variables given 'third' variables"""

# Practice does not inherently tell us something about Genetics
prob_good_genes_if_no_practice = olympic_infer.query(
                                        variables = ['Genetics'],
                                        evidence = {'Practice':1})
print(prob_good_genes_if_no_practice)

# BUT Practice does tell us something about genetics IF we also
# know something about olympic trials performance
prob_good_genes_if_no_practice_good_olympic_trials = olympic_infer.query(
                                        variables = ['Genetics'],
                                        evidence = {'Practice':1,
                                                   'OlympicTrials':2})
print(prob_good_genes_if_no_practice_good_olympic_trials)

"""### We can find out the most probable state for a variable"""

olympic_infer.map_query(variables = ['Genetics'])

olympic_infer.map_query(variables = ['Offer'])

olympic_infer.map_query(variables = ['OlympicTrials'])

